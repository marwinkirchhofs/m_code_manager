
# global variables for the hierarchical make build/sim system
# 
# All variables that are not globally needed are defined in the respective 
# sub-makefiles

##############################
# DIRECTORY
##############################

# This makefile gets included by subdirectory makefiles. Thus, without providing
# it with an absolute path any wildcard expansion would be executed relative
# from the respective working directory. For globally providing a list of source
# files, that doesn't work. These lines provide the directory of this
# variable passing makefile, effectively the project's top-level directory.
PATH_VAR_MAKEFILE	:= $(abspath $(lastword ${MAKEFILE_LIST}))
DIR_PRJ_TOP		:= $(dir ${PATH_VAR_MAKEFILE})

DIR_SCRIPTS     := ${DIR_PRJ_TOP}_T_DIR_SCRIPTS_T_
DIR_SIM         := ${DIR_PRJ_TOP}_T_DIR_SIM_T_
DIR_RTL         := ${DIR_PRJ_TOP}_T_DIR_RTL_T_
DIR_XIPS        := ${DIR_PRJ_TOP}_T_DIR_XILINX_IPS_T_

##############################
# TOOL SETTINGS
##############################

SHELL			:= bash

XIL_TOOL 		:= vivado
XIL_PRJ_NAME	:= my_prj
DIR_XIL_PRJ		:= ${DIR_PRJ_TOP}_vivado_prj
XIL_PRJ			:= ${DIR_XIL_PRJ}/${XIL_PRJ_NAME}.xpr
DIR_XIL_PRJ_XIPS	:= ${DIR_XIL_PRJ}/${XIL_PRJ_NAME}.srcs/sources_1/ip

fun_get_prj_config_var	= $(shell python3 \
						  ${DIR_SCRIPTS}/_T_SCRIPT_READ_JSON_VAR_T_ \
						  ${DIR_PRJ_TOP}_T_FILE_PROJECT_CONFIG_T_ $(1) )

##############################
# PROJECT
##############################

# select the simulation flow to be used:
# "verilator", "modelsim", "questasim"
SIMULATOR		:= $(call fun_get_prj_config_var,simulator)
SIM_TOP			:= $(call fun_get_prj_config_var,sim_top)

# --------------------------------------------------------------------
SCRIPT_CREATE_SIM_SCRIPTS	:= ${DIR_SCRIPTS}/_T_SCRIPT_CREATE_SIM_SCRIPTS_T_
SCRIPT_RUN_SIM				:= ${DIR_SIM}/${SIMULATOR}/run_sim.do
SCRIPT_PREPARE_SIM			:= ${DIR_SIM}/${SIMULATOR}/prepare_sim.sh

FILE_PROJECT_CONFIG			:= ${DIR_PRJ_TOP}_T_FILE_PROJECT_CONFIG_T_

##############################
# RTL SOURCES
##############################

SRC_RTL_SV		:= $(wildcard ${DIR_PRJ_TOP}rtl/*.sv)
SRC_RTL_V		:= $(wildcard ${DIR_PRJ_TOP}rtl/*.v)
SRC_RTL_VLOG	:= ${SRC_RTL_SV} ${SRC_RTL_V}
SRC_RTL_VHDL	:= $(wildcard ${DIR_PRJ_TOP}rtl/*.vhd)

SRC_RTL         := ${SRC_RTL_VLOG} ${SRC_RTL_VHDL}

SRC_TB_SV       := $(wildcard ${DIR_PRJ_TOP}tb/*.sv)
SRC_TB_SV       += $(wildcard ${DIR_PRJ_TOP}tb/*/*.sv)

# how to get the names of all defined modules?
# - we need to remove everything but the module name from the list of sources
#   -> basename (notdir ...)
# - we need to filter out any package or interface
#   -> filter-out (...)
# (filter-out only interprets the first '%' as a wildcard, that's why we need to
# strip the file names first such that _pkg/_if is at the end of the remaining
# string)
SRC_MODULES     := $(filter-out %_pkg %_if, $(basename $(notdir ${SRC_RTL})))
XIL_DEBUG_CORE_FILES := $(addsuffix .tcl,                                   \
                            $(addprefix ${DIR_XIPS}/xips_debug_cores_,${SRC_MODULES}))

# how to get the file names of all module-files (meaning all module file names 
# that don't have _if or _pkg in them? We can't first strip the file ending as 
# above, because then we don't know anymore what the file ending was.
fun_filter_within_str = $(foreach v,$2,$(if $(findstring $1,$v),,$v))
SRC_MODULE_FILES := $(call fun_filter_within_str,_pkg,${SRC_RTL})

# SRC_RTL_HLS		:= $(wildcard ${DIR_PRJ_TOP}hls/*/verilog/*.v)

##############################
# SIMULATION SOURCES
##############################

SRC_SIM_CPP_INCL	:= ${DIR_PRJ_TOP}tb
# SRC_SIM_CPP_INCL	:= ${DIR_PRJ_TOP}tb \
# 					   ${DIR_PRJ_TOP}tb/sysc_axi \
# 					   ${DIR_PRJ_TOP}hls/axi_counter/drivers
# SRC_SIM_SYSC	:= 	$(wildcard ${DIR_PRJ_TOP}tb/sysc_axi/*.cpp) \
# 					$(wildcard ${DIR_PRJ_TOP}sw/*.cpp)

SIM_ARGS			:= $(call fun_get_prj_config_var,sim_args_${SIMULATOR})
SIM_VERBOSITY		:= $(call fun_get_prj_config_var,sim_verbosity)

# TODO: once that is needed (should it ever be needed), integrate 
# hls_export_lang into project_config.json and fetch it from there
# # HLS
# # set up the hls export language (either verilog or vhdl)
# HLS_EXPORT_LANG	:= verilog
# 
# ifeq (${HLS_EXPORT_LANG},verilog)
# HLS_EXPORT_LANG_SUFFIX	:= v
# else
# ifeq (${HLS_EXPORT_LANG},vhdl)
# HLS_EXPORT_LANG_SUFFIX	:= vhd
# endif
# endif

VLOG_OPTS			+= +define+VERBOSITY=${SIM_VERBOSITY}
VSIM_LIB_WORK		:= ${DIR_SIM}/${SIMULATOR}/work
VSIM_WAVE_FILE		:= ${DIR_SIM}/${SIMULATOR}/wave_tb_${SIM_TOP}.do

##############################
# IP SOURCES
##############################

# TODO: this way, LIST_XIPS will also contain old IPs which are not present in 
# the project anymore. I mean, in that case they also shouldn't really be in the 
# vivado directory anymore, so the fix is much more that at any update, you 
# remove the sources for the IPs that are not needed anymore
LIST_XIPS				:= $(shell ls ${DIR_XIL_PRJ_XIPS})
LIST_XIPS_XCI			:= $(wildcard ${DIR_XIL_PRJ_XIPS}/*/*.xci)
DIR_XIPS_SIM_OUT		:= ${DIR_SIM}/${SIMULATOR}/_T_DIR_XIP_SIM_EXPORT_T_
# list of all xips with exported simulation scripts (this one is accurate as 
# opposed to LIST_XIPS, because the directories that are present actually origin 
# from the project (which gets cleaned before every export))
# TODO: come up with something that causes this thing not to complain if the 
# directory is not there, and instead just be empty
LIST_XIPS_SIM			= $(shell ls ${DIR_XIPS_SIM_OUT})
DIR_XIL_IP_PRECOMPILE	:= $(call fun_get_prj_config_var,xil_ip_precompile_path)/${SIMULATOR}

# vim: filetype=make
